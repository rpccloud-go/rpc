package pkgName

import "github.com/rpccloud-go/rpc"

type rpcCache struct{}

// NewRPCCache ...
func NewRPCCache() rpc.FuncCache {
	return &rpcCache{}
}

// Get ...
func (p *rpcCache) Get(fnString string) rpc.FuncCacheType {
	return getFCache(fnString)
}

type n = bool
type o = rpc.Context
type p = rpc.Return
type q = *rpc.RPCStream
type r = rpc.Bool
type s = rpc.Int64
type t = rpc.Uint64
type u = rpc.Float64
type v = rpc.String
type w = rpc.Bytes
type x = rpc.Array
type y = rpc.Map
type z = interface{}

const af = false
const at = true

func getFCache(fnString string) rpc.FuncCacheType {
	switch fnString {
	case "BIUFSXAM":
		return fcBIUFSXAM
	}

	return nil
}

func fcBIUFSXAM(m o, q q, z z) n {
	a, g := q.ReadBool()
	b, h := q.ReadInt64()
	c, i := q.ReadUint64()
	d, j := q.ReadFloat64()
	e, k := q.ReadString()
	f, l := q.ReadBytes()
	pa6, ok6 := q.ReadArray()
	pa7, ok7 := q.ReadMap()
	if !g || !h || !i || !j || !k || !l || !ok6 || !ok7 || q.CanRead() {
		return af
	}
	z.(func(o, r, s, t, u, v, w, x, y) p)(m, a, b, c, d, e, f, pa6, pa7)
	return at
}
